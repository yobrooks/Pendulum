!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CAMERA_CPP	Camera.cpp	2;"	d	file:
CAMERA_H	Camera.h	2;"	d
CONSTANTS_H	constants.h	2;"	d
Camera	Camera.cpp	/^	Camera::Camera()$/;"	f	class:Camera
Camera	Camera.h	/^	class Camera{$/;"	c
DISPLAY_CPP	display.cpp	2;"	d	file:
DRAWROOM_CPP	drawRoom.cpp	2;"	d	file:
DRAWSHAPE_CPP	drawShape.cpp	2;"	d	file:
FRAMERATE_CPP	frameRate.cpp	2;"	d	file:
GLOBALS_H	globals.h	2;"	d
GRAPH_CPP	graph.cpp	2;"	d	file:
HEADER_SIMPLE_OPENGL_IMAGE_LIBRARY	SOIL.h	41;"	d
INIT_CPP	init.cpp	2;"	d	file:
KEYBOARD_CPP	keyboard.cpp	2;"	d	file:
MAIN_CPP	main.cpp	2;"	d	file:
Nstep	pendMath.cpp	/^int Nstep = 1000000;$/;"	v
OPEN_GL	openGl.h	4;"	d
PENDMATH_CPP	pendMath.cpp	2;"	d	file:
PROTOTYPES_H	prototypes.h	2;"	d
RESHAPE_CPP	reshape.cpp	2;"	d	file:
RUNPHYS_CPP	runPhys.cpp	2;"	d	file:
SLEEPFUNC_CPP	sleepFunc.cpp	2;"	d	file:
SOIL_CREATE_NEW_ID	SOIL.h	/^	SOIL_CREATE_NEW_ID = 0$/;"	e	enum:__anon2
SOIL_DDS_CUBEMAP_FACE_ORDER	SOIL.h	128;"	d
SOIL_FLAG_COMPRESS_TO_DXT	SOIL.h	/^	SOIL_FLAG_COMPRESS_TO_DXT = 32,$/;"	e	enum:__anon3
SOIL_FLAG_CoCg_Y	SOIL.h	/^	SOIL_FLAG_CoCg_Y = 256,$/;"	e	enum:__anon3
SOIL_FLAG_DDS_LOAD_DIRECT	SOIL.h	/^	SOIL_FLAG_DDS_LOAD_DIRECT = 64,$/;"	e	enum:__anon3
SOIL_FLAG_INVERT_Y	SOIL.h	/^	SOIL_FLAG_INVERT_Y = 16,$/;"	e	enum:__anon3
SOIL_FLAG_MIPMAPS	SOIL.h	/^	SOIL_FLAG_MIPMAPS = 2,$/;"	e	enum:__anon3
SOIL_FLAG_MULTIPLY_ALPHA	SOIL.h	/^	SOIL_FLAG_MULTIPLY_ALPHA = 8,$/;"	e	enum:__anon3
SOIL_FLAG_NTSC_SAFE_RGB	SOIL.h	/^	SOIL_FLAG_NTSC_SAFE_RGB = 128,$/;"	e	enum:__anon3
SOIL_FLAG_POWER_OF_TWO	SOIL.h	/^	SOIL_FLAG_POWER_OF_TWO = 1,$/;"	e	enum:__anon3
SOIL_FLAG_TEXTURE_RECTANGLE	SOIL.h	/^	SOIL_FLAG_TEXTURE_RECTANGLE = 512$/;"	e	enum:__anon3
SOIL_FLAG_TEXTURE_REPEATS	SOIL.h	/^	SOIL_FLAG_TEXTURE_REPEATS = 4,$/;"	e	enum:__anon3
SOIL_HDR_RGBE	SOIL.h	/^	SOIL_HDR_RGBE = 0,$/;"	e	enum:__anon5
SOIL_HDR_RGBdivA	SOIL.h	/^	SOIL_HDR_RGBdivA = 1,$/;"	e	enum:__anon5
SOIL_HDR_RGBdivA2	SOIL.h	/^	SOIL_HDR_RGBdivA2 = 2$/;"	e	enum:__anon5
SOIL_LOAD_AUTO	SOIL.h	/^	SOIL_LOAD_AUTO = 0,$/;"	e	enum:__anon1
SOIL_LOAD_L	SOIL.h	/^	SOIL_LOAD_L = 1,$/;"	e	enum:__anon1
SOIL_LOAD_LA	SOIL.h	/^	SOIL_LOAD_LA = 2,$/;"	e	enum:__anon1
SOIL_LOAD_RGB	SOIL.h	/^	SOIL_LOAD_RGB = 3,$/;"	e	enum:__anon1
SOIL_LOAD_RGBA	SOIL.h	/^	SOIL_LOAD_RGBA = 4$/;"	e	enum:__anon1
SOIL_SAVE_TYPE_BMP	SOIL.h	/^	SOIL_SAVE_TYPE_BMP = 1,$/;"	e	enum:__anon4
SOIL_SAVE_TYPE_DDS	SOIL.h	/^	SOIL_SAVE_TYPE_DDS = 2$/;"	e	enum:__anon4
SOIL_SAVE_TYPE_TGA	SOIL.h	/^	SOIL_SAVE_TYPE_TGA = 0,$/;"	e	enum:__anon4
SPECIALKEYS_CPP	specialKeys.cpp	2;"	d	file:
TEXTURES_CPP	textures.cpp	2;"	d	file:
Texture	structs.h	/^struct Texture$/;"	s
VIEWPORT_POS	constants.h	/^const int VIEWPORT_POS = 100;$/;"	v
WINDOW_HEIGHT	constants.h	/^const int WINDOW_HEIGHT = 800;$/;"	v
askSynch	sleepFunc.cpp	/^void askSynch(int num, char** args)$/;"	f
black	drawShape.cpp	/^GLfloat black [] = {0.0, 0.0, 0.0, 1.0};$/;"	v
blueRoom	drawRoom.cpp	/^GLfloat blueRoom [] = {0.0, 0.0, 0.1, 0.5};$/;"	v
camera	display.cpp	/^Camera camera;$/;"	v
center	Camera.h	/^		float center [3];$/;"	m	class:Camera
checkForCollisions	Camera.cpp	/^		bool Camera::checkForCollisions(float colEye[], float colCen[])$/;"	f	class:Camera
count	graph.cpp	/^int count = 0;$/;"	v
crossProd	Camera.cpp	/^                void Camera::crossProd(float num1 [], float num2 [], float cross [])$/;"	f	class:Camera
defineWallsText	drawRoom.cpp	/^void defineWallsText()$/;"	f
desiredFR	constants.h	/^float desiredFR;$/;"	v
direction	Camera.cpp	/^  	 void Camera::direction(float point [])$/;"	f	class:Camera
direction	drawShape.cpp	/^GLfloat direction [] = {-2.0, 0.0, -1.0};$/;"	v
display	display.cpp	/^void display()$/;"	f
drawAxes	graph.cpp	/^void drawAxes(int length)$/;"	f
drawAxesLabels	graph.cpp	/^void drawAxesLabels()$/;"	f
drawGraphScreen	graph.cpp	/^void drawGraphScreen()$/;"	f
drawLights	drawShape.cpp	/^void drawLights()$/;"	f
drawPeriod	frameRate.cpp	/^void drawPeriod()$/;"	f
drawPoints	graph.cpp	/^void drawPoints()$/;"	f
drawRoomColor	drawRoom.cpp	/^void drawRoomColor()$/;"	f
drawScale	drawShape.cpp	/^void drawScale()$/;"	f
drawSphereColor	drawShape.cpp	/^void drawSphereColor()$/;"	f
drawSphereText	drawShape.cpp	/^void drawSphereText()$/;"	f
drawString	frameRate.cpp	/^void drawString(int x, int y, void *font, const char *string)$/;"	f
eye	Camera.h	/^		float eye [3];$/;"	m	class:Camera
findFPS	frameRate.cpp	/^void findFPS()$/;"	f
findPeriod	frameRate.cpp	/^void findPeriod()$/;"	f
forward	Camera.h	/^                float forward [3];$/;"	m	class:Camera
fpEnd	frameRate.cpp	/^static bool pStart=false, pEnd=false, fpStart=false, fpEnd=false;$/;"	v	file:
fpStart	frameRate.cpp	/^static bool pStart=false, pEnd=false, fpStart=false, fpEnd=false;$/;"	v	file:
fpp	constants.h	/^long int fpp=0;$/;"	v
fps	constants.h	/^float fps = (float) 0.0;$/;"	v
frame	constants.h	/^int frame = 0;$/;"	v
gPointsX	graph.cpp	/^std::vector<double> gPointsX;$/;"	v
gPointsY	graph.cpp	/^std::vector<double> gPointsY;$/;"	v
glutLockFrameRate	sleepFunc.cpp	/^void glutLockFrameRate()$/;"	f
graphOn	display.cpp	/^bool graphOn = false;$/;"	v
height	structs.h	/^	int width, height;$/;"	m	struct:Texture
imageExt	structs.h	/^	unsigned char* imageExt;$/;"	m	struct:Texture
init	init.cpp	/^void init(void)$/;"	f
keyboard	keyboard.cpp	/^void keyboard(unsigned char key, int x, int y)$/;"	f
lightAmbOne	init.cpp	/^GLfloat lightAmbOne[] = {1.0, 0.0, 0.0, 0.05};$/;"	v
lightAmbTwo	init.cpp	/^GLfloat lightAmbTwo[] = {0.0, 0.0, 1.0, 0.05};$/;"	v
lightDifOne	init.cpp	/^GLfloat lightDifOne[] = {1.0, 0.0, 0.0, 0.7};$/;"	v
lightDifRed	drawShape.cpp	/^GLfloat lightDifRed[] = {1.0, 0.0, 0.0, 1.0};$/;"	v
lightDifTwo	init.cpp	/^GLfloat lightDifTwo[] = {0.0, 0.0, 1.0, .7};$/;"	v
lightPosOne	init.cpp	/^GLfloat lightPosOne[] = {0.0, 5.0, 3.5, 1.0};$/;"	v
lightPosTwo	init.cpp	/^GLfloat lightPosTwo[] = {0.0, -5.0, 3.5, 1.0};$/;"	v
loadTexture	textures.cpp	/^GLuint loadTexture(const char* fileName)$/;"	f
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
moveBackward	Camera.cpp	/^	void Camera::moveBackward(float delta)$/;"	f	class:Camera
moveDown	Camera.cpp	/^	void Camera::moveDown(float delta)$/;"	f	class:Camera
moveForward	Camera.cpp	/^	void Camera::moveForward(float delta)$/;"	f	class:Camera
moveLeft	Camera.cpp	/^	void Camera:: moveLeft(float delta)$/;"	f	class:Camera
moveRight	Camera.cpp	/^	void Camera::moveRight(float delta)$/;"	f	class:Camera
moveUp	Camera.cpp	/^	void Camera::moveUp(float delta)$/;"	f	class:Camera
normalize	Camera.cpp	/^                void Camera::normalize(float num [])$/;"	f	class:Camera
oldTime	constants.h	/^int oldTime = 0;$/;"	v
omega	constants.h	/^double omega = 0.0;$/;"	v
omegadot	pendMath.cpp	/^double omegadot(double t, double theta, double omega)$/;"	f
pEnd	frameRate.cpp	/^static bool pStart=false, pEnd=false, fpStart=false, fpEnd=false;$/;"	v	file:
pStart	frameRate.cpp	/^static bool pStart=false, pEnd=false, fpStart=false, fpEnd=false;$/;"	v	file:
panDown	Camera.cpp	/^	void Camera::panDown(float delta)$/;"	f	class:Camera
panLeft	Camera.cpp	/^	void Camera::panLeft(float delta)$/;"	f	class:Camera
panRight	Camera.cpp	/^	void Camera::panRight(float delta)$/;"	f	class:Camera
panUp	Camera.cpp	/^	void Camera::panUp(float delta)$/;"	f	class:Camera
period	constants.h	/^double period=0;$/;"	v
prevOmega	constants.h	/^double prevOmega = 0;$/;"	v
prevTimeCount	frameRate.cpp	/^static double timeCount=0.0, prevTimeCount=0.0;$/;"	v	file:
reshape	reshape.cpp	/^void reshape (int w, int h)$/;"	f
returnOriginal	Camera.cpp	/^	void Camera::returnOriginal()$/;"	f	class:Camera
rotateX	Camera.cpp	/^                void Camera::rotateX(float num [], float changeX)$/;"	f	class:Camera
rotateY	Camera.cpp	/^                void Camera::rotateY(float num [], float changeY)$/;"	f	class:Camera
rotateZ	Camera.cpp	/^	  	void Camera::rotateZ(float num [], float changeZ)$/;"	f	class:Camera
run	runPhys.cpp	/^void run()$/;"	f
setSpotlight	drawShape.cpp	/^void setSpotlight()$/;"	f
shine	drawShape.cpp	/^GLfloat shine = 75.0;$/;"	v
shineRoom	drawRoom.cpp	/^GLfloat shineRoom = 75.0;$/;"	v
specialKeyboard	specialKeys.cpp	/^void specialKeyboard(int key, int x, int y)$/;"	f
spotLight	drawShape.cpp	/^GLfloat spotLight [] = {0.0, 1.0, 0.0, 1.0};$/;"	v
spotPos	drawShape.cpp	/^GLfloat spotPos [] = {8.0, 0.0, 3.5, 1.0};$/;"	v
step	pendMath.cpp	/^void step(double *t, double *theta, double *omega, double *prevOmega )$/;"	f
t	constants.h	/^double t = 0.0;$/;"	v
texID	structs.h	/^	GLUint texID;$/;"	m	struct:Texture
textures	init.cpp	/^std::vector<GLuint> textures;$/;"	v
theta	constants.h	/^double theta = M_PI\/4.0;$/;"	v
thetadot	pendMath.cpp	/^double thetadot(double t, double theta, double omega)$/;"	f
timeCount	frameRate.cpp	/^static double timeCount=0.0, prevTimeCount=0.0;$/;"	v	file:
totFrame	frameRate.cpp	/^static long int totFrame=0;$/;"	v	file:
translateXYZ	Camera.cpp	/^ 	  	void Camera::translateXYZ(float num [], float dx, float dy, float dz)$/;"	f	class:Camera
up	Camera.h	/^		float up [3];$/;"	m	class:Camera
updatePoints	graph.cpp	/^void updatePoints(double ptheta, double pomega)$/;"	f
white	drawShape.cpp	/^GLfloat white[] = {1.0, 1.0, 1.0, 0.5};$/;"	v
whiteRoom	drawRoom.cpp	/^GLfloat whiteRoom [] = {1.0, 1.0, 1.0, 1.0};$/;"	v
width	structs.h	/^	int width, height;$/;"	m	struct:Texture
